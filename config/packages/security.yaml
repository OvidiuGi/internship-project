security:
    enable_authenticator_manager: true

    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto

    role_hierarchy:
        ROLE_ADMIN: ROLE_TRAINER
        ROLE_TRAINER: ROLE_USER
        ROLE_SUPER_ADMIN: ROLE_ADMIN

    providers:
        user_email_provider:
            entity:
                class: App\Entity\User
                property: email
        user_token_provider:
            entity:
                class: App\Entity\User
                property: apiToken
        all_users:
            chain:
                providers: ['user_email_provider','user_token_provider']

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        token_login:
            lazy: true
            provider: all_users
            stateless: true
            json_login:
                check_path: api_login
            guard:
             authenticators:
                - App\Security\TokenAuthenticator
#            entry_point: security.authenticator.json_login.token_login
        main:
            lazy: true
            provider: all_users
            stateless: true
            http_basic:
                realm: Secured Area

    access_control:
        - { path: ^/api/programmes, roles: ROLE_ADMIN }
        - { path: ^/api/users, roles: ROLE_ADMIN }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
